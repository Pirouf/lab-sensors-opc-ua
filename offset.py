#! /usr/bin/env python3
#
# Copyright (c) 2018, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse, csv
import dateutil.parser as dp
import datetime
import pytz
import time
import calendar

# Expected input file format is a CSV file with:
#
# <FRAME_NUMBER, FRAME_ARRIVAL_TIME, FRAME_PAYLOAD_BYTES>
# E.g.:
# 1,1521534608.000000456,00:38:89:bd:a1:93:1d:15:(...)
# 2,1521534608.001000480,00:38:89:bd:a1:93:1d:15:(...)
#
# Frame number:         sequence number for each frame
# Frame arrival time:   Rx HW timestamp for each frame
# Frame Payload:        payload starting with 64bit timestamp (txtime)
#
# This can be easily generated with tshark with the following command line:
#  $ tshark -r tmp.pcap -t e -2 -R opcua.servicenodeid.numeric==634 -E separator=, -E header=n -Tfields \
#           -e frame.number \
#           -e frame.time_epoch \
#           -e opcua.nodeid.string  \
#           -e  opcua.datavalue.SourceTimestamp > tmp.out && python ./offset.py -i tmp.out > tmp.out.offset
#

TZINFOS = {
    'PDT': pytz.timezone('US/Pacific'),
    # ... add more to handle other timezones
    # (I wish pytz had a list of common abbreviations)
}

def compute_offsets(file_path, offset):
    with open(file_path) as f:
        reader = csv.reader(f)
        for line in reader:
            arrival_tstamp = int(line[1].replace('.',''))/1e9
            datetime_arrival_naive = datetime.datetime.utcfromtimestamp(arrival_tstamp).replace(tzinfo=pytz.utc)
            datetime_arrival_in_utc = datetime_arrival_naive.astimezone(pytz.utc)

            # rtc_datetime = dp.parse(line[1], tzinfos= TZINFOS)

            source_datetime = ''.join(line[3:5])
            # Parse the string using dateutil
            datetime_in_pdt = dp.parse(source_datetime, tzinfos= TZINFOS)
            # t is now a PDT datetime; convert it to UTC
            datetime_in_utc = datetime_in_pdt.astimezone(pytz.utc)
            # Let's convert it to a naive datetime object
            datetime_naive = datetime_in_utc.replace(tzinfo = None)

            src_txtime = (time.mktime(datetime_naive.timetuple())+(datetime_naive.microsecond/1e6))*1e6
            dst_txtime = (time.mktime(datetime_arrival_in_utc.timetuple())+(datetime_arrival_in_utc.microsecond/1e6))*1e6
            #print (datetime_arrival_in_utc,datetime_naive,dst_txtime, src_txtime,dst_txtime - src_txtime - offset)
            print(str(dst_txtime - src_txtime - offset))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', dest='file_path', default=None, type=str,
            help='Path to input file (e.g. tmp.out) generated by tshark with:\
                    tshark -r tmp.pcap -t e -2 -R opcua.servicenodeid.numeric==634 -E separator=, -E header=n -Tfields \
                           -e frame.number \
                           -e frame.time_epoch \
                           -e opcua.nodeid.string > tmp.out')
    parser.add_argument('-o', dest='offset', default=0.0, type=float,
            help='if no PTP time-sync, add manual time offset to correct shift')

    args = parser.parse_args()

    if args.file_path != None:
        compute_offsets(args.file_path, args.offset)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
